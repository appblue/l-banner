(in-package :cl-user)

(defpackage l-banner.chars
  (:use :cl :l-banner.utils)
  (:export
   #:gen-char))
(in-package :l-banner.chars)

(defun read-charset (fname nchars char-size)
"reads character set from the binary file in the format of C64 character ROM
and retuns list of 8 byte lists"
  (let ((s (open fname :element-type '(unsigned-byte 8)))
        res)
    (dotimes (i nchars)
      (let (cc)
        (dotimes (j char-size)
          (push (read-byte s) cc))
        (push (reverse cc) res)))
    (reverse res)))

(defparameter *charset*
  '((60 102 110 110 96 98 60 0) (24 60 102 126 102 102 102 0) (124 102 102 124 102 102 124 0)
    (60 102 96 96 96 102 60 0) (120 108 102 102 102 108 120 0) (126 96 96 120 96 96 126 0)
    (126 96 96 120 96 96 96 0) (60 102 96 110 102 102 60 0) (102 102 102 126 102 102 102 0)
    (60 24 24 24 24 24 60 0) (30 12 12 12 12 108 56 0) (102 108 120 112 120 108 102 0)
    (96 96 96 96 96 96 126 0) (99 119 127 107 99 99 99 0) (102 118 126 126 110 102 102 0)
    (60 102 102 102 102 102 60 0) (124 102 102 124 96 96 96 0) (60 102 102 102 102 60 14 0)
    (124 102 102 124 120 108 102 0) (60 102 96 60 6 102 60 0) (126 24 24 24 24 24 24 0)
    (102 102 102 102 102 102 60 0) (102 102 102 102 102 60 24 0) (99 99 99 107 127 119 99 0)
    (102 102 60 24 60 102 102 0) (102 102 102 60 24 24 24 0) (126 6 12 24 48 96 126 0)
    (60 48 48 48 48 48 60 0) (12 18 48 124 48 98 252 0) (60 12 12 12 12 12 60 0)
    (0 24 60 126 24 24 24 24) (0 16 48 127 127 48 16 0) (0 0 0 0 0 0 0 0)
    (24 24 24 24 0 0 24 0) (102 102 102 0 0 0 0 0) (102 102 255 102 255 102 102 0)
    (24 62 96 60 6 124 24 0) (98 102 12 24 48 102 70 0) (60 102 60 56 103 102 63 0)
    (6 12 24 0 0 0 0 0) (12 24 48 48 48 24 12 0) (48 24 12 12 12 24 48 0)
    (0 102 60 255 60 102 0 0) (0 24 24 126 24 24 0 0) (0 0 0 0 0 24 24 48)
    (0 0 0 126 0 0 0 0) (0 0 0 0 0 24 24 0) (0 3 6 12 24 48 96 0)
    (60 102 110 118 102 102 60 0) (24 24 56 24 24 24 126 0) (60 102 6 12 48 96 126 0)
    (60 102 6 28 6 102 60 0) (6 14 30 102 127 6 6 0) (126 96 124 6 6 102 60 0)
    (60 102 96 124 102 102 60 0) (126 102 12 24 24 24 24 0) (60 102 102 60 102 102 60 0)
    (60 102 102 62 6 102 60 0) (0 0 24 0 0 24 0 0) (0 0 24 0 0 24 24 48)
    (14 24 48 96 48 24 14 0) (0 0 126 0 126 0 0 0) (112 24 12 6 12 24 112 0)
    (60 102 6 12 24 0 24 0) (0 0 0 255 255 0 0 0) (8 28 62 127 127 28 62 0)
    (24 24 24 24 24 24 24 24) (0 0 0 255 255 0 0 0) (0 0 255 255 0 0 0 0)
    (0 255 255 0 0 0 0 0) (0 0 0 0 255 255 0 0) (48 48 48 48 48 48 48 48)
    (12 12 12 12 12 12 12 12) (0 0 0 224 240 56 24 24) (24 24 28 15 7 0 0 0)
    (24 24 56 240 224 0 0 0) (192 192 192 192 192 192 255 255) (192 224 112 56 28 14 7 3)
    (3 7 14 28 56 112 224 192) (255 255 192 192 192 192 192 192) (255 255 3 3 3 3 3 3)
    (0 60 126 126 126 126 60 0) (0 0 0 0 0 255 255 0) (54 127 127 127 62 28 8 0)
    (96 96 96 96 96 96 96 96) (0 0 0 7 15 28 24 24) (195 231 126 60 60 126 231 195)
    (0 60 126 102 102 126 60 0) (24 24 102 102 24 24 60 0) (6 6 6 6 6 6 6 6)
    (8 28 62 127 62 28 8 0) (24 24 24 255 255 24 24 24) (192 192 48 48 192 192 48 48)
    (24 24 24 24 24 24 24 24) (0 0 3 62 118 54 54 0) (255 127 63 31 15 7 3 1)
    (0 0 0 0 0 0 0 0) (240 240 240 240 240 240 240 240) (0 0 0 0 255 255 255 255)
    (255 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 255) (192 192 192 192 192 192 192 192)
    (204 204 51 51 204 204 51 51) (3 3 3 3 3 3 3 3) (0 0 0 0 204 204 51 51)
    (255 254 252 248 240 224 192 128) (3 3 3 3 3 3 3 3) (24 24 24 31 31 24 24 24)
    (0 0 0 0 15 15 15 15) (24 24 24 31 31 0 0 0) (0 0 0 248 248 24 24 24)
    (0 0 0 0 0 0 255 255) (0 0 0 31 31 24 24 24) (24 24 24 255 255 0 0 0)
    (0 0 0 255 255 24 24 24) (24 24 24 248 248 24 24 24) (192 192 192 192 192 192 192 192)
    (224 224 224 224 224 224 224 224) (7 7 7 7 7 7 7 7) (255 255 0 0 0 0 0 0)
    (255 255 255 0 0 0 0 0) (0 0 0 0 0 255 255 255) (3 3 3 3 3 3 255 255)
    (0 0 0 0 240 240 240 240) (15 15 15 15 0 0 0 0) (24 24 24 248 248 0 0 0)
    (240 240 240 240 0 0 0 0) (240 240 240 240 15 15 15 15)))

(defun char-get-line(n)
  (->
   (write-to-string (+ #x100 n) :base 2)
   (substitute #\# #\1 $)
   (substitute #\SPACE #\0 $)
   (subseq 1)))

(defun char-mapper(c)
  (cond
    ((and (>= c 65) (<= c 90))
     (- c 64))
    ((and (>= c 32) (<= c 58))
     c)
    (t 32)))

(defun gen-char(c)
  "Converts the character 'c' into the list of eight strings containing the
  graphical representation of the character based on the *charset* contents"
  (let (res)
    (dolist (l (nth (char-mapper (char-int c)) *charset*))
      (push (char-get-line l) res))
    (reverse res)))
