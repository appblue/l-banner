(in-package :cl-user)

(defpackage l-banner.chars
  (:use :cl :l-banner.utils)
  (:export
   #:gen-char))
(in-package :l-banner.chars)

(defun read-charset (fname nchars char-size)
"reads character set from the binary file in the format of C64 character ROM
and retuns list of 8 byte lists"
  (let ((s (open fname :element-type '(unsigned-byte 8)))
        res)
    (dotimes (i nchars)
      (let (cc)
        (dotimes (j char-size)
          (push (read-byte s) cc))
        (push (reverse cc) res)))
    (reverse res)))

(defparameter *charset*
  '(( #x3C #x66 #x6E #x6E #x60 #x62 #x3C #x00 )
    ( #x18 #x3C #x66 #x7E #x66 #x66 #x66 #x00 )
    ( #x7C #x66 #x66 #x7C #x66 #x66 #x7C #x00 )
    ( #x3C #x66 #x60 #x60 #x60 #x66 #x3C #x00 )
    ( #x78 #x6C #x66 #x66 #x66 #x6C #x78 #x00 )
    ( #x7E #x60 #x60 #x78 #x60 #x60 #x7E #x00 )
    ( #x7E #x60 #x60 #x78 #x60 #x60 #x60 #x00 )
    ( #x3C #x66 #x60 #x6E #x66 #x66 #x3C #x00 )
    ( #x66 #x66 #x66 #x7E #x66 #x66 #x66 #x00 )
    ( #x3C #x18 #x18 #x18 #x18 #x18 #x3C #x00 )
    ( #x1E #x0C #x0C #x0C #x0C #x6C #x38 #x00 )
    ( #x66 #x6C #x78 #x70 #x78 #x6C #x66 #x00 )
    ( #x60 #x60 #x60 #x60 #x60 #x60 #x7E #x00 )
    ( #x63 #x77 #x7F #x6B #x63 #x63 #x63 #x00 )
    ( #x66 #x76 #x7E #x7E #x6E #x66 #x66 #x00 )
    ( #x3C #x66 #x66 #x66 #x66 #x66 #x3C #x00 )
    ( #x7C #x66 #x66 #x7C #x60 #x60 #x60 #x00 )
    ( #x3C #x66 #x66 #x66 #x66 #x3C #x0E #x00 )
    ( #x7C #x66 #x66 #x7C #x78 #x6C #x66 #x00 )
    ( #x3C #x66 #x60 #x3C #x06 #x66 #x3C #x00 )
    ( #x7E #x18 #x18 #x18 #x18 #x18 #x18 #x00 )
    ( #x66 #x66 #x66 #x66 #x66 #x66 #x3C #x00 )
    ( #x66 #x66 #x66 #x66 #x66 #x3C #x18 #x00 )
    ( #x63 #x63 #x63 #x6B #x7F #x77 #x63 #x00 )
    ( #x66 #x66 #x3C #x18 #x3C #x66 #x66 #x00 )
    ( #x66 #x66 #x66 #x3C #x18 #x18 #x18 #x00 )
    ( #x7E #x06 #x0C #x18 #x30 #x60 #x7E #x00 )
    ( #x3C #x30 #x30 #x30 #x30 #x30 #x3C #x00 )
    ( #x0C #x12 #x30 #x7C #x30 #x62 #xFC #x00 )
    ( #x3C #x0C #x0C #x0C #x0C #x0C #x3C #x00 )
    ( #x00 #x18 #x3C #x7E #x18 #x18 #x18 #x18 )
    ( #x00 #x10 #x30 #x7F #x7F #x30 #x10 #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 )
    ( #x18 #x18 #x18 #x18 #x00 #x00 #x18 #x00 )
    ( #x66 #x66 #x66 #x00 #x00 #x00 #x00 #x00 )
    ( #x66 #x66 #xFF #x66 #xFF #x66 #x66 #x00 )
    ( #x18 #x3E #x60 #x3C #x06 #x7C #x18 #x00 )
    ( #x62 #x66 #x0C #x18 #x30 #x66 #x46 #x00 )
    ( #x3C #x66 #x3C #x38 #x67 #x66 #x3F #x00 )
    ( #x06 #x0C #x18 #x00 #x00 #x00 #x00 #x00 )
    ( #x0C #x18 #x30 #x30 #x30 #x18 #x0C #x00 )
    ( #x30 #x18 #x0C #x0C #x0C #x18 #x30 #x00 )
    ( #x00 #x66 #x3C #xFF #x3C #x66 #x00 #x00 )
    ( #x00 #x18 #x18 #x7E #x18 #x18 #x00 #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #x18 #x18 #x30 )
    ( #x00 #x00 #x00 #x7E #x00 #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #x18 #x18 #x00 )
    ( #x00 #x03 #x06 #x0C #x18 #x30 #x60 #x00 )
    ( #x3C #x66 #x6E #x76 #x66 #x66 #x3C #x00 )
    ( #x18 #x18 #x38 #x18 #x18 #x18 #x7E #x00 )
    ( #x3C #x66 #x06 #x0C #x30 #x60 #x7E #x00 )
    ( #x3C #x66 #x06 #x1C #x06 #x66 #x3C #x00 )
    ( #x06 #x0E #x1E #x66 #x7F #x06 #x06 #x00 )
    ( #x7E #x60 #x7C #x06 #x06 #x66 #x3C #x00 )
    ( #x3C #x66 #x60 #x7C #x66 #x66 #x3C #x00 )
    ( #x7E #x66 #x0C #x18 #x18 #x18 #x18 #x00 )
    ( #x3C #x66 #x66 #x3C #x66 #x66 #x3C #x00 )
    ( #x3C #x66 #x66 #x3E #x06 #x66 #x3C #x00 )
    ( #x00 #x00 #x18 #x00 #x00 #x18 #x00 #x00 )
    ( #x00 #x00 #x18 #x00 #x00 #x18 #x18 #x30 )
    ( #x0E #x18 #x30 #x60 #x30 #x18 #x0E #x00 )
    ( #x00 #x00 #x7E #x00 #x7E #x00 #x00 #x00 )
    ( #x70 #x18 #x0C #x06 #x0C #x18 #x70 #x00 )
    ( #x3C #x66 #x06 #x0C #x18 #x00 #x18 #x00 )
    ( #x00 #x00 #x00 #xFF #xFF #x00 #x00 #x00 )
    ( #x08 #x1C #x3E #x7F #x7F #x1C #x3E #x00 )
    ( #x18 #x18 #x18 #x18 #x18 #x18 #x18 #x18 )
    ( #x00 #x00 #x00 #xFF #xFF #x00 #x00 #x00 )
    ( #x00 #x00 #xFF #xFF #x00 #x00 #x00 #x00 )
    ( #x00 #xFF #xFF #x00 #x00 #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #x00 #xFF #xFF #x00 #x00 )
    ( #x30 #x30 #x30 #x30 #x30 #x30 #x30 #x30 )
    ( #x0C #x0C #x0C #x0C #x0C #x0C #x0C #x0C )
    ( #x00 #x00 #x00 #xE0 #xF0 #x38 #x18 #x18 )
    ( #x18 #x18 #x1C #x0F #x07 #x00 #x00 #x00 )
    ( #x18 #x18 #x38 #xF0 #xE0 #x00 #x00 #x00 )
    ( #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 #xFF #xFF )
    ( #xC0 #xE0 #x70 #x38 #x1C #x0E #x07 #x03 )
    ( #x03 #x07 #x0E #x1C #x38 #x70 #xE0 #xC0 )
    ( #xFF #xFF #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 )
    ( #xFF #xFF #x03 #x03 #x03 #x03 #x03 #x03 )
    ( #x00 #x3C #x7E #x7E #x7E #x7E #x3C #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #xFF #xFF #x00 )
    ( #x36 #x7F #x7F #x7F #x3E #x1C #x08 #x00 )
    ( #x60 #x60 #x60 #x60 #x60 #x60 #x60 #x60 )
    ( #x00 #x00 #x00 #x07 #x0F #x1C #x18 #x18 )
    ( #xC3 #xE7 #x7E #x3C #x3C #x7E #xE7 #xC3 )
    ( #x00 #x3C #x7E #x66 #x66 #x7E #x3C #x00 )
    ( #x18 #x18 #x66 #x66 #x18 #x18 #x3C #x00 )
    ( #x06 #x06 #x06 #x06 #x06 #x06 #x06 #x06 )
    ( #x08 #x1C #x3E #x7F #x3E #x1C #x08 #x00 )
    ( #x18 #x18 #x18 #xFF #xFF #x18 #x18 #x18 )
    ( #xC0 #xC0 #x30 #x30 #xC0 #xC0 #x30 #x30 )
    ( #x18 #x18 #x18 #x18 #x18 #x18 #x18 #x18 )
    ( #x00 #x00 #x03 #x3E #x76 #x36 #x36 #x00 )
    ( #xFF #x7F #x3F #x1F #x0F #x07 #x03 #x01 )
    ( #x00 #x00 #x00 #x00 #x00 #x00 #x00 #x00 )
    ( #xF0 #xF0 #xF0 #xF0 #xF0 #xF0 #xF0 #xF0 )
    ( #x00 #x00 #x00 #x00 #xFF #xFF #xFF #xFF )
    ( #xFF #x00 #x00 #x00 #x00 #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #x00 #x00 #xFF )
    ( #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 )
    ( #xCC #xCC #x33 #x33 #xCC #xCC #x33 #x33 )
    ( #x03 #x03 #x03 #x03 #x03 #x03 #x03 #x03 )
    ( #x00 #x00 #x00 #x00 #xCC #xCC #x33 #x33 )
    ( #xFF #xFE #xFC #xF8 #xF0 #xE0 #xC0 #x80 )
    ( #x03 #x03 #x03 #x03 #x03 #x03 #x03 #x03 )
    ( #x18 #x18 #x18 #x1F #x1F #x18 #x18 #x18 )
    ( #x00 #x00 #x00 #x00 #x0F #x0F #x0F #x0F )
    ( #x18 #x18 #x18 #x1F #x1F #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #xF8 #xF8 #x18 #x18 #x18 )
    ( #x00 #x00 #x00 #x00 #x00 #x00 #xFF #xFF )
    ( #x00 #x00 #x00 #x1F #x1F #x18 #x18 #x18 )
    ( #x18 #x18 #x18 #xFF #xFF #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #xFF #xFF #x18 #x18 #x18 )
    ( #x18 #x18 #x18 #xF8 #xF8 #x18 #x18 #x18 )
    ( #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 #xC0 )
    ( #xE0 #xE0 #xE0 #xE0 #xE0 #xE0 #xE0 #xE0 )
    ( #x07 #x07 #x07 #x07 #x07 #x07 #x07 #x07 )
    ( #xFF #xFF #x00 #x00 #x00 #x00 #x00 #x00 )
    ( #xFF #xFF #xFF #x00 #x00 #x00 #x00 #x00 )
    ( #x00 #x00 #x00 #x00 #x00 #xFF #xFF #xFF )
    ( #x03 #x03 #x03 #x03 #x03 #x03 #xFF #xFF )
    ( #x00 #x00 #x00 #x00 #xF0 #xF0 #xF0 #xF0 )
    ( #x0F #x0F #x0F #x0F #x00 #x00 #x00 #x00 )
    ( #x18 #x18 #x18 #xF8 #xF8 #x00 #x00 #x00 )
    ( #xF0 #xF0 #xF0 #xF0 #x00 #x00 #x00 #x00 )
    ( #xF0 #xF0 #xF0 #xF0 #x0F #x0F #x0F #x0F )))

(defun char-get-line(n)
  (->
   (write-to-string (+ #x100 n) :base 2)
   (substitute #\# #\1 $)
   (substitute #\SPACE #\0 $)
   (subseq 1)))

(defun char-mapper(c)
  (cond
    ((and (>= c 65) (<= c 90))
     (- c 64))
    ((and (>= c 32) (<= c 58))
     c)
    (t 32)))

(defun gen-char(c)
  "Converts the character 'c' into the list of eight strings containing the
  graphical representation of the character based on the *charset* contents"
  (let (res)
    (dolist (l (nth (char-mapper (char-int c)) *charset*))
      (push (char-get-line l) res))
    (reverse res)))
